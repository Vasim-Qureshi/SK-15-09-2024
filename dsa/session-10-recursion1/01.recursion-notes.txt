Problem:
Compute n! = n * (n-1) * (n-2) *  ---- * 1

Logic:: Base Case: if n==0 return 1
        Recursive Case: return n* factorial(n-1)

function factorial(n){
    if(n==0) return 1;
    return n * factorial(n-1)
}

console.log(factorial(5))

--------------------------------------------------------------
Fibbonacci:

fib(6)=fib(5)+fib(4)=5+3 = 8
fib(5)=fib(4)+fib(3)=3+2 = 5
fib(4)= fib(3) + fib (2) = 2 + 1 = 3
fib(3) = fib(2)+fib(1) = 1 + 1 = 2
fib(2) = fib(1)+fib(0) = 1+0 = 1

nth fibbonacci number

1 1 2 3 5 8 13 21 34 55

function fibonacci(n){
    if(n==0) return 0
    if(n==1) return 1
    return fibonacci(n-1) + fibonacci(n-2)
}

console.log(fibonacci(10))

------------------------------------------------------------
function sumArray(arr){
    if(arr.length===0) return 0
    return arr[0]+sumArray(arr.slice(1));
}

console.log(sumArray([1,2,3,4]))

// sum[1,2,3,4] = 1 + sum[2,3,4]
// sum[2,3,4]= 2 + .sum[3,4]
// sum[3,4] = 3 + sum[4]
// sum[4] = 4 + sum[]
// sum[0] = 0 (base case)
// 0 + 4 + 3 + 2 + 1


function reverseString(str){
    if(str=="") return ""
    return reverseString(str.slice(1))+str[0]
}

console.log(reverseString("sonam"))

// reverse("sonam") --> reverse("onam")+"s"
// reverse("onam") --> reverse("nam")+"o"
// reverse("nam") --> reverse("am") +"n"
// reverse("am") --> reverse("m")+"a"
// reverse("m") --> reverse("")+"m"
// reverse("")--> "" (base)

// ""+"m"+"a"+"n"+"o"+"s"

-------------------------------------------------------------
//base if string length is <=1 then true

function isPalindrome(str){
    if(str.length<=1) return true
    if(str[0] != str[str.length-1]) return false
    return isPalindrome(str.slice(1,-1))
}

console.log(isPalindrome("racecar"))
console.log(isPalindrome("hello"))

//check("racecar") r === r 
//check("aceca") a === a
//check("cec") c===c
//check("e") -> true

------------------------------------------------------------------
//you are climbing a staircase with n steps.
// you can climb 1 or 2 steps at a time
//Howmany diffrent ways can you reach the top??

// let say n=3
// [1,1,1], [2,1], [1,2] == total 3 ways
//n =4
// [1,1,1,1] , [1,1,2], [1,2,1],[2,1,1],[2,2] == 5 ways

//1,1,2,3,5,8

//Time Complexity exponential O(2^n)

function countWays(n){
    if (n===0) return 1;
    if(n<0) return 0;
    return countWays(n-1) + countWays(n-2)
}

console.log(countWays(6))